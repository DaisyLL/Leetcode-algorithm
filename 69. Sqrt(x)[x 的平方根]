##########################################################################################################################################
Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sqrtx
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
##########################################################################################################################################
这道题如果使用函数sqrt 或者pow 是很简单的，但是如果不使用公式就比较难写，简单的用平方和减法很容易执行超时
看了下评论很多人使用牛顿迭代法

class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0 or x == 1:
            return x
        else:
            r = x
            while r * r > x:
                r = (r + x /r) // 2
            return int(r)

我自己不是很理解这个方式，自己用while 写也可以，只是效率不高
class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        i = 0
        while i * i <= x:
            i += 1
        return i - 1
和朋友讨论后 把牛顿迭代法和二分法结合讨论出一种新的方法，用时16ms
class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        l = 1        ## 赋最小值为1 是为了考虑x=1 的情况, m 和prem 取值范围为|0-1|，因此会导致while 条件不满足推出循环返回0出错
        r = x        
        subr = 1     ## while 条件初始值，任意大于等于1的值都可以
        m = (l + r) / 2   ## mid 二分法取中间值
        while subr >= 1 or subr <= -1:      ## 循环条件  当预测中间值 和中间值的差小于1时结束循环
            prem = m
            remain = m * m - x    ## 缩小左右区间值
            if remain > 0:
                r = m
            else:
                l = m
            m = (l + r) / 2
            subr = m - prem
        return m     ## 实际返回结果可能为小数，但接口已处理只保留整数位
