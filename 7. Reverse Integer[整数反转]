##########################################################################################################################################
Quenstions:
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
##########################################################################################################################################
Answer1:
class Solution:
    def reverse(self, x: int) -> int:
        if str(x)[0]=='-':
            c = int(''.join([i for i in [i for i in str(x)[1:]][::-1]]))*(-1)
            return c if c>=pow(-2,31) else 0
        else:
            c = int(''.join([i for i in [i for i in str(x)][::-1]]))
            return c if c<=(pow(2,31) - 1) else 0

Answer2:
class Solution:
    def reverse(self, x: int) -> int:
        b = str(x).replace('-','')
        c = int(''.join([i for i in [i for i in b][::-1]]))*(-1 if x<0 else 1)
        return c if c>=pow(-2,31) and c<=(pow(2,31) - 1) else 0
思路：
    把整数转化为list然后再根据list的反转函数直接反转，判断大小值返回即可
