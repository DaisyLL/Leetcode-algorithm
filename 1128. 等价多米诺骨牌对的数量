给你一个由一些多米诺骨牌组成的列表 dominoes。

如果其中某一张多米诺骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。

形式上，dominoes[i] = [a, b] 和 dominoes[j] = [c, d] 等价的前提是 a==c 且 b==d，或是 a==d 且 b==c。

在 0 <= i < j < dominoes.length 的前提下，找出满足 dominoes[i] 和 dominoes[j] 等价的骨牌对 (i, j) 的数量。

 

示例：

输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]
输出：1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
##########################################################################################################################################
暴力法会超时
class Solution(object):
    def numEquivDominoPairs(self, dominoes):
        """
        :type dominoes: List[List[int]]
        :rtype: int
        """
        c = 0
        for x,info in enumerate(dominoes):
            c += dominoes[x+1:].count(info)
            if info != info[::-1]:
                c += dominoes[x+1:].count(info[::-1])
        return c
利用额外字典空间

class Solution(object):
    def numEquivDominoPairs(self, dominoes):
        """
        :type dominoes: List[List[int]]
        :rtype: int
        """
        record = dict()
        c = 0
        for x, y in dominoes:
            if (x, y) in record:
                c += record[(x,y)]
                record[(x, y)] += 1
            elif (y,x) in record:
                c += record[(y,x)]
                record[(y,x)] += 1
            else:
                record[(x,y)] = 1
        return c
