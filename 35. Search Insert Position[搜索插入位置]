############################################################################################################################################
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2

（LeetCode）
https://leetcode-cn.com/problems/search-insert-position
############################################################################################################################################

最简单的就是循环查找位置，时间复杂度为n
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        try:
            return nums.index(target)
        except:
            for i in range(len(nums)):
                if nums[0] > target:
                    return 0
                elif nums[-1] < target:
                    return len(nums)
                elif nums[i] < target and nums[i+1] > target:    ##有序数组这里可以只用写一个判断就好了
                    return i+1
#########################################################################################################################################
看了下leetcode的解题思路，主要使用二分法，时间复杂度大大降低
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        high = len(nums)
        while low < high:
            mid = low + (high - low)/2
            if nums[mid] > target:
                high = mid
            elif nums[mid] < target:
                low = mid +1
            else:
                return mid
        return low
