#######################################################################################################################################
The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.

Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.

Example 1:

Input: 1
Output: "1"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-and-say
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
########################################################################################################################################
这个题目的难点在于看懂题目.... 题目意思确实 不太好理解哈。类似斐波拉契数列下一个数字是根据上一个数字来的
比如 第一个数字1 读为 1个1  第二个数字就为 11，读为2个1  第三个数字就为 21 读为1个2 1个1 第四个数字就为 1211

使用迭代和正则匹配
class Solution:
    def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        else:
            i = 0
            r = ''
            a = self.countAndSay(n-1)
            while i < len(str(a)):
                e = int(str(a)[i])
                c = re.match('([%d]+)' %e,str(a)[i:]).groups()[0]
                r = r + str(len(c)) + str(e)
                i = i + len(c)
            return r
